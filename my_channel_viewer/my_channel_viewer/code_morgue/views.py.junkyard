def handle_submit(request, conn=None, **kwargs):


    """
    client = scripts.client(
        'Split_View_Figure.py',
        """
    #This script creates an OMERO.figure 'spilt-view' figure.
        """,
        scripts.String(
            "Data_Type", optional=False, grouping="1",
            description="Choose source of images",
            values=dataTypes, default="Image"),

        scripts.List(
            "IDs", optional=False, grouping="2",
            description="Dataset or Image IDs.").ofType(rlong(0)),

        scripts.String(
            "Row_Labels", optional=False, grouping="3",
            description="How to label each image",
            values=labelTypes, default="Name"),

        scripts.String(
            "Figure_Name", optional=False, grouping="4",
            description="Name of the new OMERO.figure",
            default="Split View Figure"),

        authors=["Will Moore", "OME Team"],
        institutions=["University of Dundee"],
        contact="ome-users@lists.openmicroscopy.org.uk",
        )
    """

@login_required()
def index(request, conn=None, **kwargs):


    projects_list = []
    # for project in conn.listProjects():
    #     project_dict_item = {}
    #     project_dict_item['project_id'] = project.getId()
    #     project_dict_item['project_name'] = project.getName()
    #     project_dict_item['project_datasets'] = []
    #     for dataset in project.listChildren():
    #         dataset_dict_item = {}
    #         dataset_dict_item['dataset_id'] = dataset.getId()
    #         dataset_dict_item['dataset_name'] = dataset.getName()
    #         dataset_dict_item['dataset_images'] = []
    #         for image in dataset.listChildren():
    #             image_dict_item = {}
    #             image_dict_item['image_id'] = image.getId()
    #             image_dict_item['image_name'] = image.getName()
    #             dataset_dict_item['dataset_images'].append(image_dict_item)
    #         project_dict_item['project_datasets'].append(dataset_dict_item)
    #     projects_list.append(project_dict_item)

    #listed_datasets = list(conn.getObjects('Dataset', params["IDs"])) #list() permet de convertir l'objet datasets en liste -> permet d'afficher les identifiants

    #render('my_channel_viewer/index.html', {'projects', projects_list})



    #val = request.POST.get('Image_dropdown')
    #print("val: ", val)

    #image_id = request.GET.get('Image_dropdown', None)

    #Ne fonctionne que si une image est déjà chargée dans l'URL
    #(ex: http://127.0.0.1:4080/my_channel_viewer/?Image_dropdown=333&submit_image=Submit+image).
    #Le QueryDict est vide sinon.
    #image_id = webclient_views.get_list(request, 'Image_dropdown')

    #idNumber = int(selected_images_IDs_integers[0])
    #print(idNumber)
    #img = conn.getObject('Image', idNumber)
    #currently_displayed_image_id = webclient_views.get_list(request, 'Selected_images_dropdown')
    #print("XXX: "+str(currently_displayed_image_id))

    #https://docs.openmicroscopy.org/omero-blitz/5.5.2/slice2html/omero/model/Channel.html
    images_channels = {}
    for image in selected_images:
        channels = image.getChannels()
        images_channels['main_channel'] = channels
        channels_pixels = []
        for channel in channels:
            channelPixels = channel.getPixels() #voir getWindowMax() dans gateway/_init_.py
            channels_pixels.append(channelPixels)
        images_channels['pixels'] = channels_pixels

    #voir https://docs.openmicroscopy.org/omero-blitz/5.5.2/javadoc/omero/model/Pixels.html
    #ne pas chercher à avoir texto les valeurs des pixels, voir comment l'image est rendue sur le navigateur, pour voir comment transposer les réglages

    context['image_channels'] = images_channels
    #dataset_id = request.GET.get('dataset', 213)
    #print("DATASET_ID"+str(dataset_id))
    #dataset = conn.getObject('Dataset', dataset_id)
    #images = []
    #for img in dataset.listChildren():
        #images.append({'id': img.id, 'name': img.name})
    #context['images'] = images



    """
    #if request.method == ["GET"]:
        #a = request.GET['Image_dropdown']
        #print(a)
    #else:
        #return render(request, 'my_channel_viewer/index.html', context)
    #image_id = request.GET.get('image', None)
    #print(image_id)
    #img = conn.getObject('Image', image_id)
    """

    """

    """

